nivdror1, ido.shachar
niv dror (305498198), Ido Shachar (311248355)
EX: 1

FILES:
myfile.c -- a file with some code
myfile.h -- a file with some headers

REMARKS:
These are some remarks that
I want the graders to know
about this submission.

ANSWERS:

Q1:
Here are answers to theoretical questions
if there were such questions in the exercise.

Q2:
Here are answers to theoreical questions 
if there were such questions in the exercise.

Task1:

The program create two folders and a file, it opens the file and writes a sequence of spaces into it.
Then it closes the file and deletes the two folders.

mkdir - try and succeed at making a directory called "welcome" and giving all the permissions
		to the owner user and to the owner's user group but withholding the write permissions
		from the other users.

mkdir - try and succeed at making a directory called "welcome/to" and giving all the permissions
		to the owner user and to the owner's user group but withholding the write permissions
		from the other users.
		
open -  try and succeed at creating and opening a file called "welcome/to/OS2016" when the flags:
		-O_WRONLY specifies that "OS2016" will be open just for writing.
		-O_CREAT specifies that "OS2016" will be created if it doesn't exists
		-O_TRUNC specifies that "OS2016" allready exists and could be written
		in addition, it gives permission to read/write but not execute for all users.

fstat - try and succeed getting information about the file named "OS2016".

write - writing 187 chars of spaces to the file "OS2016", when the parameters specifies:
		fd - the file description id.
		buf- the string that being written into the file
		count - the number of chars in the buf.

close - close the file "OS2016" when the parameter fd specifies the file description id.

unlink - trying and succeed at deleting the file "welcome/to/OS2016" from the fileSystem ,
		 when the parameter specifies: pathname - the path of the file

rmdir - deleting the folder "welcome/to" which is an empty folder,
		when the parameter specifies: pathname - the path of the folder.
		
rmdir - deleting the folder "welcome" which is an empty folder,
		when the parameter specifies: pathname - the path of the folder.

exit_group - exit all of the threads in the process
			 when the parameter specifies: status  - if the process was a success or failure


Task2:

The first decision we made is how to test the operation time, The problem was that when we do an
empty arithmetic operation like 4+4, without assign the result anywhere, the compiler ignored
this instruction.
We decide to assign the result of the operation in a dummy variable, because when we do an
assignment the compiler has to execute the instruction. As we see in nand, the cost of the
assignment (after all the calculations were done) is suppose to be only one pop action on
the stack so we can ignore it.
We use loop unrolling as we advised.

The second decision is how to test function call and return time. Once again, if the function is
totally empty the compiler will notice that and ignore it.
We decide to fill the function with some arbitrary commands so that the compiler has to execute
the function, then we calculate the time it takes to execute the commands in the function and
subtract this value from the time we get on execute the function, this outcome is the time it
takes to call and return from the function.

The trap test is trivial, no surprise here.

The last decision we make is how to make sure disk access will occur. The solution we made is to
use the command "flush" that causes the output to appear in real time. That means the access to
the disk has to be immediate, like we want.